name: POI RELEASE CODEQL

on:
  workflow_dispatch:
  push:
    branches: 
    - main
    paths:
    - 'apis/poi/**'
    - '.github/workflows/poi-release.yml'

env:
  APPLICATIONPATH: apis/poi/
  APPLICATIONNAME: openhackqug903g3poi
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/poi
  RESOURCE_GROUP: openhackqug903g3rg
  STAGING_URL: https://openhackqug903g3poi-staging.azurewebsites.net/api/healthcheck/poi
  PROD_URL: https://openhackqug903g3poi.azurewebsites.net/api/healthcheck/poi
  
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ${{ env.APPLICATIONPATH }}/web
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

  deploy-staging:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Start staging slot'    
      run: |
        az webapp start \
        -g ${{ env.RESOURCE_GROUP }} \
        -n ${{ env.APPLICATIONNAME }} \
        --slot staging
    - uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APPLICATIONNAME }}
        slot-name: staging
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.run_number }}

  validate-staging:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Check the deployed service URL
      uses: jtalk/url-health-check-action@v2
      with:
        # Check the following URLs one by one sequentially
        url: ${{ env.STAGING_URL }}
        # Follow redirects, or just report success on 3xx status codes
        # follow-redirect: false # Optional, defaults to "no"
        # Fail this action after this many failed attempts
        max-attempts: 10 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 5s # Optional, only applicable to max-attempts > 1
        # Retry all errors, including 404. This option might trigger curl upgrade.
        # retry-all: no # Optional, defaults to "no"
  blue-green-swap:
    needs: validate-staging
    runs-on: ubuntu-latest
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Swap slots
      run: |
          az webapp deployment slot swap \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.APPLICATIONNAME }} \
            --slot staging \
            --target-slot production      
  validate-production:
    needs: blue-green-swap
    runs-on: ubuntu-latest
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Check the deployed service PROD URL
      uses: jtalk/url-health-check-action@v2
      with:
        # Check the following URLs one by one sequentially
        url: ${{ env.PROD_URL }}
        # Follow redirects, or just report success on 3xx status codes
        # follow-redirect: false # Optional, defaults to "no"
        # Fail this action after this many failed attempts
        max-attempts: 10 # Optional, defaults to 1
        # Delay between retries
        retry-delay: 5s # Optional, only applicable to max-attempts > 1
        # Retry all errors, including 404. This option might trigger curl upgrade.
        # retry-all: no # Optional, defaults to "no"

  optimize-production:
    needs: validate-production
    runs-on: ubuntu-latest
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'Stop staging slot'    
      run: |
        az webapp stop \
        -g ${{ env.RESOURCE_GROUP }} \
        -n ${{ env.APPLICATIONNAME }} \
        --slot staging
        
  rollback:
    needs: validate-production
      
    runs-on: ubuntu-latest
    if: failure('validate-production')
    environment: production-rollback
    steps:
    - name: 'Login via Azure CLI' 
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: 'temp action'
      run: echo ${{ needs.validate-production.result }}
    - name: Rollback
      run: |
          az webapp deployment slot swap \
            -g ${{ env.RESOURCE_GROUP }} \
            -n ${{ env.APPLICATIONNAME }} \
            --slot staging \
            --target-slot production    
